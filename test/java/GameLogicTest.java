//GENERATED BY CHATGPT
import org.example.GameLogic;
import org.junit.jupiter.api.Test;

import static org.example.SOSgui.gameLogic;
import static org.junit.jupiter.api.Assertions.*;

public class GameLogicTest {

    @org.junit.Test
    @Test
    public void testBoardSizeInitialization() {
        // Arrange
        int expectedSize = 8;
        GameLogic game = new GameLogic(expectedSize);

        // Act
        int actualSize = game.getBoardSize();

        // Assert
        assertEquals(expectedSize, actualSize, "Board size should be initialized correctly.");
    }

    // Test for checking if getBoardSize() correctly returns the board size
    @org.junit.Test
    @Test
    public void testGetBoardSize() {
        // Arrange: Set up a board size that you want to test.
        int expectedBoardSize = 8;

        // Act: Create an instance of GameLogic with the given board size.
        GameLogic gameLogic = new GameLogic(expectedBoardSize);

        // Assert: Check if the getBoardSize() method returns the expected board size.
        assertEquals(expectedBoardSize, gameLogic.getBoardSize(), "The board size should be " + expectedBoardSize);
    }

    @org.junit.Test
    @Test
    public void testStartNewGameWithChosenBoardSize() {
        // Arrange
        int expectedBoardSize = 8; // Chosen board size

        // Act: Create a new game logic instance with the chosen board size
        GameLogic gameLogic = new GameLogic(expectedBoardSize);

        // Assert: Check if the board size is correctly initialized
        assertEquals(expectedBoardSize, gameLogic.getBoardSize(), "The board size should be " + expectedBoardSize);
    }

    @org.junit.Test
    @Test
    public void testPlayerMoveValidMove() {
        // Blue player makes a move at (0,0)
        boolean moveSuccessful = gameLogic.playerMove(0, 0);
        assertTrue(moveSuccessful, "Move should be successful");  // Ensure the move is valid
        assertEquals("Blue player should have moved 'S' to (0,0)", "S", gameLogic.getBoard()[0][0]);  // Verify 'S' at (0,0)

        // Now Red player makes a move at (1,1)
        moveSuccessful = gameLogic.playerMove(1, 1);
        assertTrue(moveSuccessful, "Move should be successful");  // Ensure the move is valid
        assertEquals("Red player should have moved 'O' to (1,1)", "O", gameLogic.getBoard()[1][1]);  // Verify 'O' at (1,1)

        // Ensure that the turn has switched
        assertEquals("It should now be Blue player's turn again", "S", gameLogic.getCurrentPlayerLetter()); // The turn should switch to blue after red's move
    }


}

